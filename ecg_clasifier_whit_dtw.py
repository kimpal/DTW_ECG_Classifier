# -*- coding: utf-8 -*-
"""ECG_clasifier_whit_DTW.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n1POEdInujUKnyR-CIpp_Em-8qkArkm5

# ElectroCarDiogram (ECG) clasifyer whit Dynamic Time Wrapping (DTW)

The Imports
"""

# nessesery imports
import time
import random
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split

"""Loading the datasets"""

# Data loading and preprocessing
dataframe = pd.read_csv('http://storage.googleapis.com/download.tensorflow.org/data/ecg.csv', header=None)
raw_data = dataframe.values

#werifying the the size of the data set
dataframe.shape

# lock at th data
dataframe.tail()

dataframe.head()

# Extract labels and data points
# The last element contains the labels
labels = raw_data[:, -1]

# The other data points are the electrocadriogram data
data = raw_data[:, 0:-1]

train_data, test_data, train_labels, test_labels = train_test_split(
    data, labels, test_size=0.2, random_state=0
)

"""separating normal and abnormal data"""

train_labels = train_labels.astype(bool)
test_labels = test_labels.astype(bool)

normal_train_data = train_data[train_labels]
normal_test_data = test_data[test_labels]

anomalous_train_data = train_data[~train_labels]
anomalous_test_data = test_data[~test_labels]

normal_train_data.shape

print(normal_train_data)

anomalous_train_data.shape

# picing a random normal data index to use in the referance data
random.randint(0,2333)

# to pic an radom abnormal data index to use in the referance data
random.randint(0,1665)

"""Defining th referance signals that that the DTW uses as referance data to clasify the test data on"""

# after running the random number for normal and abnor mal twise we haw the referance data to use
# defining the referance test ecg signals
# Example usage with loop over test signals
# differnet number of referance data would efect the acuracy scor of the prediction
ECGs = {
    'Normal Ref ECG 1': normal_train_data[2181],
    'Abnormal Ref ECG 1': anomalous_train_data[1491],
    'Normal Ref ECG 2': normal_train_data[1198],
    'Abnormal Ref ECG 2': anomalous_train_data[95],
    'Normal Ref ECG 3': normal_train_data[1742],
    'Abnormal Ref ECG 3': anomalous_train_data[153],
}

"""The defining of the dtw algorithem an the matrix"""

# define the dtw and the matrix
def dtw(x, y, window):
    n, m = len(x), len(y)
    window = max(window, abs(n - m))
    dtw_matrix = np.full((n+1, m+1), np.inf)
    dtw_matrix[0, 0] = 0

    for i in range(1, n+1):
        for j in range(max(1, i-window), min(m+1, i+window)):
            cost = abs(x[i-1] - y[j-1])
            last_min = np.min(dtw_matrix[i-1:i, j-1:j+1])
            dtw_matrix[i, j] = cost + last_min

    return dtw_matrix[-1, -1]

# tiesting different window sizes and calculate acuracy and run time
window_sizes = [1, 2, 3, 4, 5, 10] # List of window sizes to test
for window in window_sizes:
    print(f"Testing window size: {window}")
    num_correct = 0
    num_incorrect = 0
    start_time = time.time() # start time for the current window size
    for i in range(len(normal_test_data)):
        test_signal = normal_test_data[i]
        scores = []
        for ecg in ECGs:
            score = dtw(test_signal, ECGs[ecg], window=window)
            scores.append(score)
        predicted_ecg = list(ECGs.keys())[np.argmin(scores)]
        if 'Abnormal' in predicted_ecg:
            num_incorrect += 1
        else:
            num_correct += 1

    accuracy = num_correct / len(normal_test_data)
    end_time = time.time() # end time for the current window size
    print(f"Accuracy: {accuracy}")
    print(f"Run time for window size {window}: {end_time - start_time} seconds") # individual run time for the current window size

#luoping through all the normal test data and calculate the acuracy of te clasification and calculating the total executing tim

start_time = time.time()
num_correct = 0
num_incorrect = 0
for i in range(len(normal_test_data)):
    test_signal = normal_test_data[i]
    scores = []
    for ecg in ECGs:
        score = dtw(test_signal, ECGs[ecg], window=1)
        scores.append(score)
    predicted_ecg = list(ECGs.keys())[np.argmin(scores)]
    if 'Abnormal' in predicted_ecg:
        num_incorrect += 1
    else:
        num_correct += 1

accuracy = num_correct / len(normal_test_data)
print(f"Accuracy: {accuracy}")

end_time = time.time()
total_time = end_time - start_time

print(f"Total execution time: {total_time} seconds")
print(f"total test data:", len(normal_test_data))

# luoping through all the abnormall test data and calculate the acuracy of te clasification and calculating the total executing tim

start_time = time.time()
num_correct = 0
num_incorrect = 0
for i in range(len(anomalous_test_data)):
    test_signal = anomalous_test_data[i]
    scores = []
    for ecg in ECGs:
        score = dtw(test_signal, ECGs[ecg], window=1)
        scores.append(score)
    predicted_ecg = list(ECGs.keys())[np.argmin(scores)]
    if 'Abnormal' in predicted_ecg:
        num_correct += 1
    else:
        num_incorrect += 1

accuracy = num_correct / len(anomalous_test_data)
print(f"Accuracy: {accuracy}")

end_time = time.time()
total_time = end_time - start_time

print(f"Total execution time: {total_time} seconds")
print(f"total test data:", len(anomalous_test_data))